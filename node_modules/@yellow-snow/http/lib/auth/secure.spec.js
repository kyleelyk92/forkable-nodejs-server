"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai = require("chai");
var _1 = require("../");
var secure_1 = require("./secure");
var expect = chai.expect;
var ne = undefined;
describe("Secure", function () {
    it("should be called before method it's attached to", function (done) {
        var i = 0;
        var Authenticate = /** @class */ (function () {
            function Authenticate() {
                this.status = 200;
            }
            Authenticate.prototype.canActivate = function (_REQ) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        i++;
                        return [2 /*return*/, this.status];
                    });
                });
            };
            return Authenticate;
        }());
        // tslint:disable-next-line:max-classes-per-file
        var TestHttpController = /** @class */ (function (_super) {
            __extends(TestHttpController, _super);
            function TestHttpController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            TestHttpController.prototype.testMethod = function () {
                expect(i).to.equal(1);
                done();
            };
            __decorate([
                secure_1.Secure(Authenticate),
                __metadata("design:type", Function),
                __metadata("design:paramtypes", []),
                __metadata("design:returntype", void 0)
            ], TestHttpController.prototype, "testMethod", null);
            return TestHttpController;
        }(_1.HttpController));
        var ctrl = new TestHttpController(ne, ne, ne);
        ctrl.testMethod();
    });
    it("should call canActivate each time a new class is instantiated", function (done) {
        var i = 0;
        var called = false;
        // tslint:disable-next-line:max-classes-per-file
        var Authenticate = /** @class */ (function () {
            function Authenticate() {
                this.status = 200;
            }
            Authenticate.prototype.canActivate = function (_REQ) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        i++;
                        return [2 /*return*/, this.status];
                    });
                });
            };
            return Authenticate;
        }());
        // tslint:disable-next-line:max-classes-per-file
        var TestHttpController = /** @class */ (function (_super) {
            __extends(TestHttpController, _super);
            function TestHttpController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            TestHttpController.prototype.testMethod = function () {
                if (i === 2 && !called) {
                    called = true;
                    done();
                }
            };
            __decorate([
                secure_1.Secure(Authenticate),
                __metadata("design:type", Function),
                __metadata("design:paramtypes", []),
                __metadata("design:returntype", void 0)
            ], TestHttpController.prototype, "testMethod", null);
            return TestHttpController;
        }(_1.HttpController));
        var ctrl1 = new TestHttpController(ne, ne, ne);
        var ctrl2 = new TestHttpController(ne, ne, ne);
        ctrl1.testMethod();
        ctrl2.testMethod();
    });
    it("should resolve a 401 is Auth returns false", function (done) {
        var status;
        // tslint:disable-next-line:max-classes-per-file
        var Authenticate = /** @class */ (function () {
            function Authenticate() {
            }
            Authenticate.prototype.canActivate = function (_REQ) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, false];
                    });
                });
            };
            return Authenticate;
        }());
        // tslint:disable-next-line:max-classes-per-file
        var res = {
            send: function () {
                expect(status).to.equal(401);
                done();
            },
            status: function (code) {
                status = code;
            },
        };
        // tslint:disable-next-line:max-classes-per-file
        var TestHttpController = /** @class */ (function (_super) {
            __extends(TestHttpController, _super);
            function TestHttpController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            TestHttpController.prototype.testMethod = function () {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        chai.assert.fail();
                        return [2 /*return*/];
                    });
                });
            };
            __decorate([
                secure_1.Secure(Authenticate),
                __metadata("design:type", Function),
                __metadata("design:paramtypes", []),
                __metadata("design:returntype", Promise)
            ], TestHttpController.prototype, "testMethod", null);
            return TestHttpController;
        }(_1.HttpController));
        var ctrl = new TestHttpController(ne, res, ne);
        ctrl.testMethod();
    });
    it("should an arbitrary number returned by Auth that is not 200", function (done) {
        var status;
        var EXPECTED_CODE = 500;
        // tslint:disable-next-line:max-classes-per-file
        var Authenticate = /** @class */ (function () {
            function Authenticate() {
            }
            Authenticate.prototype.canActivate = function (_REQ) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, EXPECTED_CODE];
                    });
                });
            };
            return Authenticate;
        }());
        // tslint:disable-next-line:max-classes-per-file
        var res = {
            send: function () {
                expect(status).to.equal(EXPECTED_CODE);
                done();
            },
            status: function (code) {
                status = code;
            },
        };
        // tslint:disable-next-line:max-classes-per-file
        var TestHttpController = /** @class */ (function (_super) {
            __extends(TestHttpController, _super);
            function TestHttpController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            TestHttpController.prototype.testMethod = function () {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        chai.assert.fail();
                        return [2 /*return*/];
                    });
                });
            };
            __decorate([
                secure_1.Secure(Authenticate),
                __metadata("design:type", Function),
                __metadata("design:paramtypes", []),
                __metadata("design:returntype", Promise)
            ], TestHttpController.prototype, "testMethod", null);
            return TestHttpController;
        }(_1.HttpController));
        var ctrl = new TestHttpController(ne, res, ne);
        ctrl.testMethod();
    });
    it("should call final method when canActivate resolves 200", function (done) {
        // tslint:disable-next-line:max-classes-per-file
        var Authenticate = /** @class */ (function () {
            function Authenticate() {
            }
            Authenticate.prototype.canActivate = function (_REQ) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, 200];
                    });
                });
            };
            return Authenticate;
        }());
        // tslint:disable-next-line:max-classes-per-file
        var TestHttpController = /** @class */ (function (_super) {
            __extends(TestHttpController, _super);
            function TestHttpController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            TestHttpController.prototype.testMethod = function () {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        done();
                        return [2 /*return*/];
                    });
                });
            };
            __decorate([
                secure_1.Secure(Authenticate),
                __metadata("design:type", Function),
                __metadata("design:paramtypes", []),
                __metadata("design:returntype", Promise)
            ], TestHttpController.prototype, "testMethod", null);
            return TestHttpController;
        }(_1.HttpController));
        var ctrl = new TestHttpController(ne, ne, ne);
        ctrl.testMethod();
    });
    it("should pass an array of roles to canActivate if roles are defined", function (done) {
        // tslint:disable-next-line:max-classes-per-file
        var Authenticate = /** @class */ (function () {
            function Authenticate() {
            }
            Authenticate.prototype.canActivate = function (_REQ, roles) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        expect(roles).to.deep.equal(["hello", "world"]);
                        return [2 /*return*/, 200];
                    });
                });
            };
            return Authenticate;
        }());
        // tslint:disable-next-line:max-classes-per-file
        var TestHttpController = /** @class */ (function (_super) {
            __extends(TestHttpController, _super);
            function TestHttpController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            TestHttpController.prototype.testMethod = function () {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        done();
                        return [2 /*return*/];
                    });
                });
            };
            __decorate([
                secure_1.Secure(Authenticate, ["hello", "world"]),
                __metadata("design:type", Function),
                __metadata("design:paramtypes", []),
                __metadata("design:returntype", Promise)
            ], TestHttpController.prototype, "testMethod", null);
            return TestHttpController;
        }(_1.HttpController));
        var ctrl = new TestHttpController(ne, ne, ne);
        ctrl.testMethod();
    });
    it("should create an array of roles if passed a simple string", function (done) {
        // tslint:disable-next-line:max-classes-per-file
        var Authenticate = /** @class */ (function () {
            function Authenticate() {
            }
            Authenticate.prototype.canActivate = function (_REQ, roles) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        expect(roles).to.be.instanceof(Array);
                        return [2 /*return*/, 200];
                    });
                });
            };
            return Authenticate;
        }());
        // tslint:disable-next-line:max-classes-per-file
        var TestHttpController = /** @class */ (function (_super) {
            __extends(TestHttpController, _super);
            function TestHttpController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            TestHttpController.prototype.testMethod = function () {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        done();
                        return [2 /*return*/];
                    });
                });
            };
            __decorate([
                secure_1.Secure(Authenticate, "hello"),
                __metadata("design:type", Function),
                __metadata("design:paramtypes", []),
                __metadata("design:returntype", Promise)
            ], TestHttpController.prototype, "testMethod", null);
            return TestHttpController;
        }(_1.HttpController));
        var ctrl = new TestHttpController(ne, ne, ne);
        ctrl.testMethod();
    });
    it("should preserve context of 'this' on controller", function (done) {
        // tslint:disable-next-line:max-classes-per-file
        var Authenticate = /** @class */ (function () {
            function Authenticate() {
            }
            Authenticate.prototype.canActivate = function (_REQ, roles) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        expect(roles).to.be.instanceof(Array);
                        return [2 /*return*/, 200];
                    });
                });
            };
            return Authenticate;
        }());
        // tslint:disable-next-line:max-classes-per-file
        var TestHttpController = /** @class */ (function (_super) {
            __extends(TestHttpController, _super);
            function TestHttpController() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            TestHttpController.prototype.testMethod = function () {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        this.done();
                        return [2 /*return*/];
                    });
                });
            };
            TestHttpController.prototype.done = function () {
                done();
            };
            __decorate([
                secure_1.Secure(Authenticate, "hello"),
                __metadata("design:type", Function),
                __metadata("design:paramtypes", []),
                __metadata("design:returntype", Promise)
            ], TestHttpController.prototype, "testMethod", null);
            return TestHttpController;
        }(_1.HttpController));
        var ctrl = new TestHttpController(ne, ne, ne);
        ctrl.testMethod();
    });
});

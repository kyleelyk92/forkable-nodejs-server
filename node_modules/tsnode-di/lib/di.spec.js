"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai = require("chai");
var injectable_1 = require("./injectable");
var injector_1 = require("./injector");
var resolve_1 = require("./resolve");
var expect = chai.expect;
var A = /** @class */ (function () {
    function A() {
        this.aId = Math.ceil(Math.random() * 100000);
    }
    Object.defineProperty(A.prototype, "id", {
        get: function () {
            return this.aId;
        },
        enumerable: true,
        configurable: true
    });
    A = __decorate([
        injectable_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], A);
    return A;
}());
var B = /** @class */ (function () {
    function B(a) {
        this.a = a;
    }
    B = __decorate([
        injectable_1.Injectable(),
        __metadata("design:paramtypes", [A])
    ], B);
    return B;
}());
var C = /** @class */ (function () {
    function C(a) {
        this.a = a;
    }
    __decorate([
        resolve_1.Resolve(B),
        __metadata("design:type", B)
    ], C.prototype, "b", void 0);
    C = __decorate([
        injectable_1.Injectable(),
        __metadata("design:paramtypes", [A])
    ], C);
    return C;
}());
describe("DI", function () {
    beforeEach(function (done) {
        done();
    });
    afterEach(function (done) {
        done();
    });
    describe("Injector", function () {
        it("should not throw if Reflect.getMetadata returns undefined", function () {
            var getMetadata = Reflect.getMetadata;
            Reflect.getMetadata = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return undefined;
            };
            var a = injector_1.Injector.resolve(A);
            Reflect.getMetadata = getMetadata;
            expect(a).not.to.be.undefined;
        });
    });
    describe("class A", function () {
        it("should instantiate", function () {
            var a = injector_1.Injector.resolve(A);
            expect(a).not.to.be.undefined;
        });
    });
    describe("class B", function () {
        it("should instantiate", function () {
            var b = injector_1.Injector.resolve(B);
            expect(b).not.to.be.undefined;
        });
        it("should resolve an instance of class A through DI", function () {
            var b = injector_1.Injector.resolve(B);
            expect(b.a).not.to.be.undefined;
        });
        it("should have access to instance A's id", function () {
            var b = injector_1.Injector.resolve(B);
            expect(b.a.id).to.be.greaterThan(0);
            expect(b.a.id).to.be.lessThan(100001);
        });
    });
    describe("class C", function () {
        it("should instantiate", function () {
            var c = injector_1.Injector.resolve(C);
            expect(c).not.to.be.undefined;
        });
        it("should resolve an instance of class A through DI", function () {
            var c = injector_1.Injector.resolve(C);
            expect(c.a).not.to.be.undefined;
        });
        it("should have access to instance A's id", function () {
            var c = injector_1.Injector.resolve(C);
            expect(c.a.id).to.be.greaterThan(0);
            expect(c.a.id).to.be.lessThan(100001);
        });
        it("should resolve an instance of class B with @Resolve", function () {
            var c = injector_1.Injector.resolve(C);
            expect(c.b).to.be.instanceof(B);
        });
        it("should have access to instance A's id through class B", function () {
            var c = injector_1.Injector.resolve(C);
            expect(c.b.a.id).to.be.greaterThan(0);
            expect(c.b.a.id).to.be.lessThan(100001);
        });
        it("should resolve the same instance of A as B does", function () {
            var b = injector_1.Injector.resolve(B);
            var c = injector_1.Injector.resolve(C);
            expect(b.a.id).to.be.equal(c.a.id);
        });
    });
});
